# docker-compose.test.yml
version: '3.8'

services:
  # Um único serviço de teste para ver se o 'build' funciona
  teste_de_construcao:
    build:
      context: ./backend
      dockerfile: backend.Dockerfile
    restart: always
    # As variáveis de ambiente são cruciais para a aplicação funcionar.
    # O Portainer vai ler o ficheiro .env.production que está no seu GitHub.
    env_file:
      - ./.env.production
    # Ligamos o serviço a uma rede que vamos criar abaixo.
    networks:
      - recrutamento-net

  # --- Serviço do Frontend (React App) ---
  frontend:
    build:
      # O mesmo para o frontend: construir a partir da pasta 'frontend'.
      context: ./frontend
      dockerfile: frontend.Dockerfile
    restart: always
    ports:
      # Expomos a porta 80 do contentor para a porta 80 do seu servidor.
      # É assim que os utilizadores acedem ao seu site.
      - "80:80"
    # Garante que o frontend só arranque depois de o backend estar pronto.
    depends_on:
      - backend
    # Ligamos o serviço à mesma rede para que possam comunicar.
    networks:
      - recrutamento-net

# --- Definição da Rede da Aplicação ---
# Criamos uma rede privada para esta stack, garantindo a comunicação segura
# entre o frontend e o backend. O Nginx fará o proxy para o backend.
networks:
  recrutamento-net:
    driver: bridge